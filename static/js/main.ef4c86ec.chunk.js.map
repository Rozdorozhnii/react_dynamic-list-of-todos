{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SortBy","API_URL","getTodos","complete","a","url","fetch","response","json","getUser","userId","TodoList","props","className","htmlFor","type","id","placeholder","value","query","onChange","event","onChangeSearchInput","filterCompleted","onSelectCompletionChange","default","true","false","onClick","onRandomize","todos","map","todo","classNames","completed","checked","readOnly","title","selectedUserId","onSelectUser","CurrentUser","onClearUser","user","name","website","phone","App","state","searchQuery","loadUser","API","setState","loadTodos","filter","handleSelectUser","handleClearUser","handleChangeSearchInput","target","handleSelectCompletionChange","getVisibleTodos","str","toLowerCase","includes","shuffle","array","copy","i","length","j","Math","floor","random","handleRandomize","prevState","this","visibleTodos","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef4c86ec.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport './TodoList.scss';\n\nexport enum SortBy {\n  true = 'true',\n  false = 'false',\n  default = '',\n}\n\ntype Props = {\n  todos: Todo[];\n  onSelectUser: (userId: number) => void;\n  selectedUserId: number;\n  query: string;\n  onChangeSearchInput: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  filterCompleted: SortBy;\n  onSelectCompletionChange: (event: React.ChangeEvent<HTMLSelectElement>) => void;\n  onRandomize: () => void;\n};\n\nexport const TodoList: React.FC<Props> = (props) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <div className=\"TodoList__interactive\">\n      <label htmlFor=\"search-query\" className=\"label\">\n        Search todo&nbsp;\n        <input\n          className=\"TodoList__interactive-input\"\n          type=\"text\"\n          id=\"search-query\"\n          placeholder=\"Type search todo\"\n          value={props.query}\n          onChange={(event => props.onChangeSearchInput(event))}\n        />\n      </label>\n      <label htmlFor=\"select-completed\">\n        Toggle completion status&nbsp;\n        <select\n          className=\"TodoList__interactive-input\"\n          id=\"select-completed\"\n          value={props.filterCompleted}\n          onChange={(event) => props.onSelectCompletionChange(event)}\n        >\n          <option value={SortBy.default}>All</option>\n          <option value={SortBy.true}>Completed</option>\n          <option value={SortBy.false}>Active</option>\n\n        </select>\n      </label>\n      <span>\n        Random todos&nbsp;\n        <button\n          className=\"button TodoList__user-button TodoList__user-button--selected\"\n          type=\"button\"\n          onClick={props.onRandomize}\n        >\n          Randomize\n        </button>\n      </span>\n    </div>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {props.todos.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('TodoList__item',\n              { 'TodoList__item--checked': todo.completed },\n              { 'TodoList__item--unchecked': !todo.completed })}\n          >\n            <label htmlFor=\"checkbox\">\n              <input\n                id=\"checkbox\"\n                checked={todo.completed}\n                type=\"checkbox\"\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n\n            <button\n              onClick={() => {\n                if (todo.userId !== props.selectedUserId) {\n                  props.onSelectUser(todo.userId);\n                }\n              }}\n              className={classNames('button TodoList__user-button',\n                { 'TodoList__user-button--selected': todo.userId === props.selectedUserId })}\n              type=\"button\"\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","const API_URL = 'https://mate.academy/students-api/';\n\nexport const getTodos = async (complete: string): Promise<Todo[]> => {\n  let url = `${API_URL}todos/`;\n\n  if (complete !== '') {\n    url += `?completed=${complete}`;\n  }\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n\nexport const getUser = async (userId = 0): Promise<User> => {\n  let url = `${API_URL}users/`;\n\n  if (userId !== 0) {\n    url += `${userId}`;\n  }\n\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React from 'react';\n\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User;\n  onClearUser: () => void;\n};\n\nexport const CurrentUser: React.FC<Props> = (props) => (\n  <div className=\"CurrentUser\">\n    <button\n      onClick={() => props.onClearUser()}\n      className=\"\n        TodoList__user-button\n        TodoList__user-button--selected\n        button\n      \"\n      type=\"button\"\n    >\n      Clear\n    </button>\n\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:\n        {' '}\n        {props.user.id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{props.user.name}</h3>\n    <p className=\"CurrentUser__email\">{props.user.website}</p>\n    <p className=\"CurrentUser__phone\">{props.user.phone}</p>\n  </div>\n);\n","import React from 'react';\n\nimport './styles/general.scss';\nimport './App.scss';\nimport * as API from './api';\nimport { TodoList, SortBy } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n  user: User | null;\n  searchQuery: string;\n  todos: Todo[];\n  filterCompleted: SortBy;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    user: null,\n    searchQuery: '',\n    todos: [],\n    filterCompleted: SortBy.default,\n  };\n\n  async componentDidMount() {\n    this.loadTodos();\n  }\n\n  loadUser = async (userId: number) => {\n    const user = await API.getUser(userId);\n\n    this.setState({\n      user,\n    });\n  };\n\n  loadTodos = async (filter = '') => {\n    const todos = await API.getTodos(filter);\n\n    this.setState({\n      todos,\n    });\n  };\n\n  handleSelectUser = (userId: number) => {\n    this.setState(() => ({\n      selectedUserId: userId,\n    }), () => this.loadUser(this.state.selectedUserId));\n  };\n\n  handleClearUser = () => {\n    this.setState(() => ({\n      user: null,\n      selectedUserId: 0,\n    }));\n  };\n\n  handleChangeSearchInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      searchQuery: event.target.value,\n    });\n  };\n\n  handleSelectCompletionChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState(() => ({\n      filterCompleted: event.target.value as SortBy,\n    }), () => this.loadTodos(this.state.filterCompleted));\n  };\n\n  getVisibleTodos = (todos: Todo[], str: string): Todo[] => {\n    return todos.filter(todo => todo.title.toLowerCase().includes(str.toLowerCase()));\n  };\n\n  shuffle = (array: Todo[]): Todo[] => {\n    const copy = [...array];\n\n    for (let i = copy.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [copy[i], copy[j]] = [copy[j], copy[i]];\n    }\n\n    return copy;\n  };\n\n  handleRandomize = () => {\n    this.setState(prevState => ({\n      todos: this.shuffle(prevState.todos),\n    }));\n  };\n\n  render() {\n    const {\n      selectedUserId,\n      todos,\n      user,\n      searchQuery,\n      filterCompleted,\n    } = this.state;\n\n    const visibleTodos = this.getVisibleTodos(todos, searchQuery);\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            onRandomize={this.handleRandomize}\n            onSelectCompletionChange={this.handleSelectCompletionChange}\n            filterCompleted={filterCompleted}\n            todos={visibleTodos}\n            onSelectUser={this.handleSelectUser}\n            selectedUserId={selectedUserId}\n            query={searchQuery}\n            onChangeSearchInput={this.handleChangeSearchInput}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {user !== null ? (\n              <CurrentUser\n                user={user}\n                onClearUser={this.handleClearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}